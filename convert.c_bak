
/*************************************
//    in:(in)打包数据长度
//    out:(out)Sequence信息长度
//    30 82 11 22(4 bytes)
*************************************/
int lvtestlen(int *in,int *out)
{
	int  i,j;
	i=*in;
	if(i<128)j=2;
		else if(i<256)j=3;
			else if(i<65536)j=4;
				else j=6;
	*out=j;
	return 0;
}


/**********************************/
/*  30 82 11 22                   */
/*  *baolen=(0x11<<8)+0x22        */
/*  out= 82 11 22                 */
/*  *step=3                       */
/**********************************/
int lvencodesquence(unsigned char *out,int baolen,int *step)
{
	int i,j;
	int len;

	len=baolen;
	lvtestlen(&len,&i);
	j=0;
	switch(i){
		case 2:{out[j++]=len;break;}
		case 3:{out[j++]=0x81;out[j++]=len;break;}
		case 4:{out[j++]=0x82;out[j++]=len>>8;out[j++]=len&0xff;break;	}
		case 6:{out[j++]=0x84;
		out[j++]=(len>>24)&0xff;
				out[j++]=(len>>16)&0xff;
				out[j++]=(len>>8)&0xff;
				out[j++]=len&0xff;
				break;
			}
		default:break;
	}
	*step=j;
	return 0;
}


int lvencodetvl(unsigned char mTAG,unsigned char *input,int inputLen,unsigned char *mValue,unsigned int *mValueLen)
{
	int i,j,k,l,sequenceLen;
	k=inputLen;

	if((input==NULL)||(inputLen==0))
	{
		mValue[0]=mTAG;	mValue[1]=0;	*mValueLen=2;
		return 0;
	}

/*
#define TAG_INTEGER                    0x2
#define TAG_BIT_STRING                 0x3
*/
	if(mTAG==0x3)k++;
	if(mTAG==0x2&&(input[0]&0x80))k++;

	lvtestlen((int *)&k,(int *)&sequenceLen);

	j=sequenceLen+k;

	if(j>(*mValueLen))
	{	return 1;	}


	i=0;

	mValue[i++]=mTAG&0xff;

	lvencodesquence(mValue+i,k,&l);
	i+=l;

	if(k>inputLen)mValue[i++]=0;

	memcpy((char *)mValue+i,(char *)input,inputLen);
	i+=inputLen;

	*mValueLen=i;

	return 0;
}

void lvgetlenbeam(unsigned char * data,int * len,int * tag)
{

	switch(data[0]&0xff)
	{
		case 0x81:
			*len=data[1]&0xff;
			*tag+=2;
			return;
		case 0x82:
			*len=(data[2]&0xff)+((data[1]&0xff)<<8);
			*tag+=3;
			return;
		case 0x84:
			*len=((data[1]&0xff)<<24)+((data[2]&0xff)<<16)+((data[3]&0xff)<<8)+((data[4]&0xff));
			*tag+=5;
			return;
		default:
			*len=data[0]&0xff;
			*tag+=1;
			return;
	}
}


int fixEccSign(unsigned int hasSigId,unsigned char * sigR,unsigned int sigRL,unsigned char * sigS,unsigned int sigSL,unsigned char * outData,unsigned int * outLen)
{
	int ret = 0;

	unsigned char sign[500];
	unsigned int  signLen = 0;

	unsigned char temp[500];
	unsigned int  tempLen = 0;
	unsigned int  weedLen = 0;

	/*ecsgOid ecsgOidLn ECC算法名称*/
	/*ecnmOid ecnmOidLn ECC曲线名称*/
	/*ecenOid ecenOidLn ECC加密标识*/
	/*ecpmOid ecpmOidLn ECC算法模式*/
	/*ecsiOid ecsiOidLn ECC签名标识*/

	if(hasSigId)
	{
		tempLen = 500;
		ret=lvencodetvl(0x06,ecsiOid,ecsiOidLn,temp,&tempLen);
		//printf("fixeccsign 002\n");
		if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 1;	}
		//printf("fixeccsign 003\n");
		if(ecspHavFlg)
		{	memcpy(temp+tempLen,ecspOid,ecspOidLn);	tempLen+=ecspOidLn;		}
		//printf("fixeccsign 004\n");
		/*fixed temp to outData (signoid ok)*/
		ret=lvencodetvl(0x30,temp,tempLen,outData,outLen);
		if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 2;	}
		//printf("fixeccsign 005\n");

	}
	//printf("fixeccsign 006 sigRL =(%d)\n",sigRL);
	/*fixed r to temp*/
	tempLen = 500;
	//printf("fixeccsign 006 tempLen =(%d)\n",tempLen);
	ret=lvencodetvl(0x02,sigR,sigRL,temp,&tempLen);
	if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 3;	}
	//printf("fixeccsign 007\n");
	/*fixed s to temp*/
	weedLen = 500;
	ret=lvencodetvl(0x02,sigS,sigSL,temp+tempLen,&weedLen);
	if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 4;	}
	tempLen+=weedLen;
	//printf("fixeccsign 008\n");
	if(hasSigId)
	{
		//printf("fixeccsign 009\n");
		/*have sig oid*/
		/*fixed temp to sign*/
		signLen = 500;
		ret=lvencodetvl(0x30,temp,tempLen,sign,&signLen);
		if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 5;	}
		//printf("fixeccsign 010\n");
		/*fixed sign to outData (signoid ok)*/
		weedLen = 500;
		ret=lvencodetvl(0x03,sign,signLen,outData+*outLen,&weedLen);
		if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 6;	}
		*outLen+=weedLen;
		//printf("fixeccsign 011\n");
	}
	else
	{
		//printf("fixeccsign 012\n");
		/*not have sig oid*/
		/*fixed temp to sign*/
		signLen = 500;
		ret=lvencodetvl(0x30,temp,tempLen,outData,outLen);
		//printf("fixeccsign 013\n");
		if(ret){	printf("fixEccSign lvencodetvl failed[%d]\n",ret);	return 7;	}
	}

	return 0;
}

int disEccSign(unsigned char * sign,int signLen,unsigned char * sigR,unsigned int * sigRL,unsigned char * sigS,unsigned int * sigSL)
{
	int off = 0;
	int len = 0;

//2020/9/25 15:10 wbx dzqz and dzyz used
//printf("disEccSign signLen=[%d]\n",signLen);
if(signLen==64){
	memcpy(sigR,sign,32); *sigRL = 32;
	memcpy(sigS,sign+32,32); *sigSL = 32;
}
else{
	/*SEQUENCE*/
	if((sign[0]&0xff)!=0x30)
		return 1;

	off++;	lvgetlenbeam(sign+off,&len,&off);

	if((off+len)!=signLen)
	{
		/*have sig id*/
		if((sign[off+len]&0xff)!=0x03) return 2;

		off+=len; off++; lvgetlenbeam(sign+off,&len,&off);

		if((sign[off]&0xff)!=0x00) return 3;

		off++; off++; lvgetlenbeam(sign+off,&len,&off);

		/*sigR*/
		if((sign[off]&0xff)!=0x02) return 4;

		if((sign[off+1]&0xff)==0x20)
		{	memcpy(sigR,sign+off+2,32); *sigRL = 32;	off+=34; }
		else
		if((sign[off+1]&0xff)==0x21)
		{	memcpy(sigR,sign+off+3,32); *sigRL = 32;	off+=35; }

		/*sigS*/
		if((sign[off]&0xff)!=0x02) return 5;

		if((sign[off+1]&0xff)==0x20)
		{	memcpy(sigS,sign+off+2,32); *sigSL = 32;	off+=34; }
		else
		if((sign[off+1]&0xff)==0x21)
		{	memcpy(sigS,sign+off+3,32); *sigSL = 32;	off+=35; }

		if(off!=signLen) return 6;

	}
	else
	{
		/*not have sig id*/

		/*sigR*/
		if((sign[off]&0xff)!=0x02) return 7;

		if((sign[off+1]&0xff)==0x20)
		{	memcpy(sigR,sign+off+2,32); *sigRL = 32;	off+=34; }
		else
		if((sign[off+1]&0xff)==0x21)
		{	memcpy(sigR,sign+off+3,32); *sigRL = 32;	off+=35; }

		/*sigS*/
		if((sign[off]&0xff)!=0x02) return 8;

		if((sign[off+1]&0xff)==0x20)
		{	memcpy(sigS,sign+off+2,32); *sigSL = 32;	off+=34; }
		else
		if((sign[off+1]&0xff)==0x21)
		{	memcpy(sigS,sign+off+3,32); *sigSL = 32;	off+=35; }

		if(off!=signLen) return 9;

	}
}

	return 0;

}